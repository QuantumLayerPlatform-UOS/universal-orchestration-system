name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better detection
      
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Detect Secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --baseline .secrets.baseline || true
          detect-secrets audit .secrets.baseline || echo "No baseline found"

  # Dependency scanning
  dependency-scan:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [go, python, javascript]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.language }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.language }}.sarif'
          category: 'trivy-${{ matrix.language }}'
      
      # Go-specific dependency scanning
      - name: Nancy (Go dependencies)
        if: matrix.language == 'go'
        run: |
          # Install nancy
          go install github.com/sonatype-nexus-community/nancy@latest
          
          # Run nancy on each Go module
          find . -name "go.mod" -type f | while read mod; do
            dir=$(dirname "$mod")
            echo "Scanning Go dependencies in $dir"
            cd "$dir"
            go list -json -m all | nancy sleuth || true
            cd - > /dev/null
          done
      
      # Python-specific dependency scanning
      - name: Safety (Python dependencies)
        if: matrix.language == 'python'
        run: |
          pip install safety
          find . -name "requirements*.txt" -type f | while read req; do
            echo "Scanning Python dependencies in $req"
            safety check -r "$req" --json || true
          done
      
      # JavaScript-specific dependency scanning
      - name: npm audit (JavaScript dependencies)
        if: matrix.language == 'javascript'
        run: |
          find . -name "package.json" -type f | while read pkg; do
            dir=$(dirname "$pkg")
            echo "Scanning JavaScript dependencies in $dir"
            cd "$dir"
            if [ -f "package-lock.json" ]; then
              npm audit --json || true
            fi
            cd - > /dev/null
          done
      
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'qlp-uos-${{ matrix.language }}'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --scan './**/*'
      
      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-${{ matrix.language }}
          path: reports/

  # Static Application Security Testing (SAST)
  sast-scan:
    name: SAST Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go, python, javascript
          queries: security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:multi"
      
      - name: Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/golang
            p/python
            p/javascript
            p/typescript
            p/terraform
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=qlp-uos
            -Dsonar.organization=quantumlayer
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*_test.go,**/vendor/**,**/node_modules/**
      
      - name: Bandit (Python SAST)
        run: |
          pip install bandit
          find . -name "*.py" -type f | xargs bandit -f json -o bandit-report.json || true
      
      - name: GoSec (Go SAST)
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          find . -name "*.go" -type f | xargs gosec -fmt sarif -out gosec-results.sarif ./... || true
      
      - name: Upload GoSec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'gosec-results.sarif'
          category: 'gosec'

  # Container scanning
  container-scan:
    name: Container Scanning
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - orchestrator
          - quantum-core
          - ai-ml
          - blockchain
          - iot-edge
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check if Dockerfile exists
        id: check_dockerfile
        run: |
          if [ -f "services/${{ matrix.service }}/Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Build Docker image for scanning
        if: steps.check_dockerfile.outputs.exists == 'true'
        run: |
          docker build -t qlp-uos/${{ matrix.service }}:scan ./services/${{ matrix.service }}
      
      - name: Run Trivy container scan
        if: steps.check_dockerfile.outputs.exists == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'qlp-uos/${{ matrix.service }}:scan'
          format: 'sarif'
          output: 'trivy-container-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy container results
        if: steps.check_dockerfile.outputs.exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-container-${{ matrix.service }}.sarif'
          category: 'trivy-container-${{ matrix.service }}'
      
      - name: Snyk Container Scan
        if: steps.check_dockerfile.outputs.exists == 'true'
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: 'qlp-uos/${{ matrix.service }}:scan'
          args: --severity-threshold=high
      
      - name: Dockerfile linting with Hadolint
        if: steps.check_dockerfile.outputs.exists == 'true'
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: services/${{ matrix.service }}/Dockerfile
          format: sarif
          output-file: hadolint-${{ matrix.service }}.sarif
      
      - name: Upload Hadolint results
        if: steps.check_dockerfile.outputs.exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'hadolint-${{ matrix.service }}.sarif'
          category: 'hadolint-${{ matrix.service }}'

  # Infrastructure as Code scanning
  iac-scan:
    name: IaC Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Checkov scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/terraform
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          skip_check: CKV_AZURE_88,CKV_AZURE_89  # Example skip rules
      
      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: 'checkov'
      
      - name: Terrascan
        run: |
          # Install terrascan
          curl -L "https://github.com/tenable/terrascan/releases/latest/download/terrascan_Linux_x86_64.tar.gz" | tar -xz
          sudo mv terrascan /usr/local/bin/
          
          # Run terrascan
          terrascan scan -i terraform -d infrastructure/terraform --output sarif > terrascan-results.sarif || true
      
      - name: Upload Terrascan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: terrascan-results.sarif
          category: 'terrascan'
      
      - name: TFSec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: infrastructure/terraform
          format: sarif
          sarif_file: tfsec-results.sarif
      
      - name: Upload TFSec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec-results.sarif
          category: 'tfsec'

  # License scanning
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: FOSSA Scan
        uses: fossas/fossa-action@main
        continue-on-error: true
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
      
      - name: License Finder
        run: |
          gem install license_finder
          license_finder action_items --decisions-file=.license-finder.yml || true
      
      - name: Licensed
        uses: github/licensed-ci@v1
        continue-on-error: true
        with:
          command: status

  # Security report summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, sast-scan, container-scan, iac-scan, license-scan]
    if: always()
    
    steps:
      - name: Create security report
        run: |
          echo "# Security Scan Summary" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "Branch: ${{ github.ref_name }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Scan Results" >> security-report.md
          echo "- Secret Scanning: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- Dependency Scanning: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- SAST Scanning: ${{ needs.sast-scan.result }}" >> security-report.md
          echo "- Container Scanning: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- IaC Scanning: ${{ needs.iac-scan.result }}" >> security-report.md
          echo "- License Scanning: ${{ needs.license-scan.result }}" >> security-report.md
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-report.md
      
      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
      
      - name: Fail if critical issues found
        if: |
          needs.secret-scan.result == 'failure' ||
          needs.sast-scan.result == 'failure'
        run: |
          echo "Critical security issues found. Please review the security reports."
          exit 1